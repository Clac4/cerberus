#+STARTUP: content
#+OPTIONS: num:nil
#+OPTIONS: author:nil

* unbound dns server

Select local_unbound during freebsd setup
or install the unbound package

+ switch to root using sudo 

#+BEGIN_SRC sh
sudo su
#+END_SRC

+ or doas

#+BEGIN_SRC sh
doas su
#+END_SRC

install unbound dns server

#+BEGIN_SRC sh
pkg install unbound
#+END_SRC

enable unbound to start at boot 
if you enable unbound during the freebsd the service is called local_unbound

#+BEGIN_SRC sh
sysrc local_unbound_enable="YES"
#+END_SRC

** unbound config

dnscrypt needs - do-not-query-localhost: no
in the custom.conf file in order to work

Create a custom.conf configuration file for unbound
switch to root and then create custom.conf

#+BEGIN_SRC sh
vi /etc/unbound/conf.d/custom.conf
#+END_SRC

#+BEGIN_SRC sh
server:
	include: "/var/unbound/unbound_ad_servers"
# include: "/etc/unbound/unbound_outgoing_interface"
	verbosity: 1
	access-control: 0.0.0.0/0 refuse
	access-control: 127.0.0.0/8 allow
	access-control: ::0/0 refuse
	access-control: ::1 allow
	access-control: ::ffff:127.0.0.1 allow
	
	# enable to not answer id.server and hostname.bind queries.
	hide-identity: yes
	hide-version: yes
	harden-glue: yes
	harden-dnssec-stripped: yes
	
        # dont query localhost needed for dnscrypt-proxy
        do-not-query-localhost: no
# remote-control:
#	control-enable: no

#+END_SRC


/etc/unbound/forward.conf

#+BEGIN_SRC sh
forward-zone:
	name: "."
	forward-addr: 127.0.0.1@5353
#+END_SRC

* dnscrypt-proxy2

** dnscrypt-proxy2 install

install dnscrypt-proxy as root

#+BEGIN_SRC sh
pkg install dnscrypt-proxy2
#+END_SRC

** dnscrypt config

*** dnscrypt-proxy.toml

/usr/local/etc/dnscrypt-proxy/dnscrypt-proxy.toml

+ iPv6 blocking

If you don't have IPv6 connectivity, most applications will keep sending DNS queries to resolve IPv6 IP addresses no matter what.

In this scenario, dnscrypt-proxy can immediately respond "there are no IPv6 addresses" instead of sending queries to upstream DNS servers, and waiting for useless responses.

In order to do so, change:

block_ipv6 = false

to:

block_ipv6 = true

You may also want to avoid probing resolvers that are only accessible using IPv6:

ipv6_servers = false

*** rc.conf

use the sysrc command as root to add commands to /etc/rc.conf

#+BEGIN_SRC sh
sysrc dnscrypt_proxy_enable="YES"
sysrc dnscrypt_proxy_pidfile="/var/run/dnscrypt-proxy.pid"
sysrc dnscrypt_proxy_logfile="/var/log/dnscrypt-proxy.log"
#+END_SRC

we also need to enable unbound in the /etc/rc.conf

#+BEGIN_SRC sh
# unbound dns
local_unbound_enable="YES"
# dnscrypt
dnscrypt_proxy_enable="YES"
dnscrypt_proxy_pidfile="/var/run/dnscrypt-proxy.pid"
dnscrypt_proxy_logfile="/var/log/dnscrypt-proxy.log"
#+END_SRC

*** resolv.conf

Stop unbound dns server and take down interfaces before editing resolv.conf

#+BEGIN_SRC sh
doas service local_unbound stop
doas ifconfig ue0 down
doas vim /etc/resolv.conf
doas service local_unbound start
doas ifconfig ue0 up
#+END_SRC

edit /etc/resolv.conf

#+BEGIN_SRC sh
# Generated by resolvconf
search localdomain
nameserver 127.0.0.1
options edns0
#+END_SRC

avoid overwriting /etc/resolv.conf

edit /etc/dhclient-enter-hooks as root

#+BEGIN_SRC sh
vi /etc/dhclient-enter-hooks
#+END_SRC

add the following to /etc/dhclient-enter-hooks

#+BEGIN_SRC sh
add_new_resolv_conf() {
  # We don't want /etc/resolv.conf changed
  # So this is an empty function
  return 0
}
#+END_SRC

** dnscrypt check

dnscrypt-proxy -resolve example.com


test dnssec

https://dnssec.vs.uni-due.de/
