#+STARTUP: content
* ndi runtime freebsd set up

install ndi runtime on freebsd which is required for the [[https://github.com/Palakis/obs-ndi][obs-ndi plugin]]

** Freebsd Configuring Linux Binary Compatibility

By default, Linux libraries are not installed and Linux binary compatibility is not enabled.
Linux libraries can either be installed manually or from the FreeBSD Ports Collection.

Before attempting to build the port, load the Linux® kernel module, otherwise the build will fail:

#+begin_src sh
# kldload linux
#+end_src

For 64-bit compatibility:

#+begin_src sh
# kldload linux64
#+end_src

To verify that the module is loaded:

#+begin_src sh
% kldstat
      Id Refs Address    Size     Name
      1    2 0xc0100000 16bdb8   kernel
      7    1 0xc24db000 d000     linux.ko
#+end_src

The emulators/linux_base-c7 package or port is the easiest way to install a base set of Linux® libraries and binaries on a FreeBSD system.
To install the port:

#+begin_src sh
# pkg install emulators/linux_base-c7
#+end_src

For Linux compatibility to be enabled at boot time, add this line to /etc/rc.conf:

#+begin_src conf
linux_enable="YES"
#+end_src

On 64-bit machines, /etc/rc.d/abi will automatically load the module for 64-bit emulation.

** Linux ndi runtime

download the linux ndi runtime from [[https://github.com/Palakis/obs-ndi/releases][Palakis github repo]]

we need to download libndi4_4.5.1-1_amd64.deb

#+begin_src sh
wget 'https://github.com/Palakis/obs-ndi/releases/download/4.9.1/libndi4_4.5.1-1_amd64.deb'
#+end_src

*** dpkg-deb list the contents of the deb file

list the contents of the deb file

#+begin_src sh
dpkg-deb -c libndi4_4.5.1-1_amd64.deb
#+end_src

the output from the dpkg-deb command lists the files to be installed and there location

#+begin_src sh
drwxr-xr-x root/root         0 2020-05-14 11:35 ./
drwxr-xr-x root/root         0 2020-04-30 18:30 ./usr/
drwxr-xr-x root/root         0 2020-05-14 11:35 ./usr/bin/
-rwxr-xr-x root/root    655160 2020-05-14 11:35 ./usr/bin/ndi-directory-service
-rwxr-xr-x root/root   3683448 2020-05-14 11:35 ./usr/bin/ndi-record
drwxr-xr-x root/root         0 2020-05-14 11:35 ./usr/lib/
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so.4
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so.4.5.1
#+end_src

+ libndi4_4.5.1-1_amd64.deb installs 2 binaries 

#+begin_src sh
-rwxr-xr-x root/root    655160 2020-05-14 11:35 ./usr/bin/ndi-directory-service
-rwxr-xr-x root/root   3683448 2020-05-14 11:35 ./usr/bin/ndi-record
#+end_src

+ and 3 .so files

#+begin_src sh
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so.4
-rwxr-xr-x root/root   4663328 2020-05-14 11:35 ./usr/lib/libndi.so.4.5.1
#+end_src

** ldd can be used to determine which shared libraries the application needs

If a Linux application complains about missing shared libraries after configuring Linux binary compatibility,
determine which shared libraries the Linux binary needs and install them manually.

From a Linux system, ldd can be used to determine which shared libraries the application needs.

*** ndi-directory-service

#+begin_src sh
ldd /usr/bin/ndi-directory-service
#+end_src

+ output

#+begin_src sh
linux-vdso.so.1 (0x00007ffec7dc7000)
libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fbeaafee000)
libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fbeaafcb000)
libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbeaadd9000)
/lib64/ld-linux-x86-64.so.2 (0x00007fbeab163000)
#+end_src

*** ndi-record

#+begin_src sh
ldd /usr/bin/ndi-record
#+end_src

+ output

#+begin_src sh
linux-vdso.so.1 (0x00007fff21953000)
libavahi-common.so.3 => /usr/lib/x86_64-linux-gnu/libavahi-common.so.3 (0x00007f2fbfa2b000)
libavahi-client.so.3 => /usr/lib/x86_64-linux-gnu/libavahi-client.so.3 (0x00007f2fbfa18000)
libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2fbfa12000)
libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fbf8c3000)
libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2fbf8a0000)
libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fbf6ae000)
/lib64/ld-linux-x86-64.so.2 (0x00007f2fbfa5f000)
libdbus-1.so.3 => /lib/x86_64-linux-gnu/libdbus-1.so.3 (0x00007f2fbf65b000)
libsystemd.so.0 => /lib/x86_64-linux-gnu/libsystemd.so.0 (0x00007f2fbf5ae000)
librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f2fbf5a3000)
liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f2fbf57a000)
liblz4.so.1 => /usr/lib/x86_64-linux-gnu/liblz4.so.1 (0x00007f2fbf559000)
libgcrypt.so.20 => /usr/lib/x86_64-linux-gnu/libgcrypt.so.20 (0x00007f2fbf43b000)
libgpg-error.so.0 => /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f2fbf416000)
#+end_src

*** Installing Additional Libraries Manually

Copy all the files in the last column of the output from the Linux® system into /compat/linux on the FreeBSD system. Once copied, create symbolic links to the names in the first column.

If a Linux shared library already exists with a matching major revision number to the first column of the ldd output, it does not need to be copied to the file named in the last column, as the existing library should work. It is advisable to copy the shared library if it is a newer version, though. The old one can be removed, as long as the symbolic link points to the new one
