#+STARTUP: content
#+OPTIONS: num:nil

* cross fade clips
** cross fade audio and video 

audio video cross fade between 2 clips after 9 seconds

#+BEGIN_SRC sh
ffmpeg \
-i clip1.mp4 -i clip2.mp4 \
-an -filter_complex \
"   [0:v]trim=start=0:end=9,setpts=PTS-STARTPTS[firstclip];
    [1:v]trim=start=1,setpts=PTS-STARTPTS[secondclip];
    [0:v]trim=start=9:end=10,setpts=PTS-STARTPTS[fadeoutsrc];
    [1:v]trim=start=0:end=1,setpts=PTS-STARTPTS[fadeinsrc];
    [fadeinsrc]format=pix_fmts=yuva420p,      
                fade=t=in:st=0:d=1:alpha=1[fadein];
    [fadeoutsrc]format=pix_fmts=yuva420p,
                fade=t=out:st=0:d=1:alpha=1[fadeout];
    [fadein]fifo[fadeinfifo];
    [fadeout]fifo[fadeoutfifo];
    [fadeoutfifo][fadeinfifo]overlay[crossfade];
    [firstclip][crossfade][secondclip]concat=n=3[output];
    [0:a][1:a] acrossfade=d=1 [audio]
" \
-map "[output]" -map "[audio]" video-audio-xfade.mp4
#+END_SRC

audio fade in,
audio video cross fade between 2 clips after 9 seconds

#+BEGIN_SRC sh
ffmpeg \
-i clip1.mp4 -i clip2.mp4 \
-an -filter_complex \
"   [0:v]trim=start=0:end=9,setpts=PTS-STARTPTS[firstclip];
    [1:v]trim=start=1,setpts=PTS-STARTPTS[secondclip];
    [0:v]trim=start=9:end=10,setpts=PTS-STARTPTS[fadeoutsrc];
    [1:v]trim=start=0:end=1,setpts=PTS-STARTPTS[fadeinsrc];
    [fadeinsrc]format=pix_fmts=yuva420p,      
                fade=t=in:st=0:d=1:alpha=1[fadein];
    [fadeoutsrc]format=pix_fmts=yuva420p,
                fade=t=out:st=0:d=1:alpha=1[fadeout];
    [fadein]fifo[fadeinfifo];
    [fadeout]fifo[fadeoutfifo];
    [fadeoutfifo][fadeinfifo]overlay[crossfade];
    [firstclip][crossfade][secondclip]concat=n=3[output];
    [0:a] afade=t=in:ss=0:d=1 [audiofadein]; \
    [audiofadein][1:a] acrossfade=d=1 [audio]
" \
-map "[output]" -map "[audio]" fadein-video-xfade.mp4
#+END_SRC

** cross fade audio no overlap

cross fade audio betwen 2 video clips with no audio overlap
fade out the first clip and fade in the second clip

#+BEGIN_SRC sh
ffmpeg \
-i clip1.mp4 -i clip2.mp4 \
-filter_complex \
"[0:v][1:v]concat=n=2[output];
[0:a][1:a] acrossfade=d=1:o=0 [audio]" \
-map "[output]" -map "[audio]" audio-crossfade.mp4
#+END_SRC

cross fade audo no overlap and fade in

#+BEGIN_SRC sh
ffmpeg \
-i clip1.mp4 -i clip2.mp4 \
-filter_complex \
"[0:v][1:v]concat=n=2[output];
[0:a] afade=t=in:ss=0:d=1 [fadein]; \
[fadein][1:a] acrossfade=d=1:o=0 [audio]" \
-map "[output]" -map "[audio]" fadein-crossfade.mp4
#+END_SRC

* ffmpeg concat clips
  
create a list of all the mp4s in the current directory  

#+BEGIN_SRC sh
printf "file '%s'\n" *.mp4 > mylist.txt
#+END_SRC

use ffmpeg to concat the video file in the text file

#+BEGIN_SRC sh
ffmpeg -f concat -i mylist.txt -c copy output.mp4
#+END_SRC

use subshell to generate a list of the mp4s in the current directory

#+BEGIN_SRC sh
ffmpeg -f concat -i <( for f in *.mp4; do echo "file '$(pwd)/$f'"; done ) output.mp4
#+END_SRC

* ffprobe
** ffprobe duration

#+BEGIN_SRC sh
ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 infile.mp4
#+END_SRC


#+BEGIN_SRC sh
#!/bin/bash
mkdir fade
for f in *.mp4; do
  dur=$(ffprobe -loglevel error -show_entries format=duration -of default=nk=1:nw=1 "$f")
  offset=$(bc -l <<< "$dur"-1)
  ffmpeg -i "$f" -filter_complex "[0:v]fade=type=in:duration=1,fade=type=out:duration=1:start_time='$offset'[v];[0:a]afade=type=in:duration=1,afade=type=out:duration=1:start_time='$offset'[a]" -map "[v]" -map "[a]" fade/"$f"
done
#+END_SRC

** ffprobe number of frames

#+BEGIN_SRC sh
ffprobe -v error -select_streams v:0 -show_entries stream=nb_frames -of default=nokey=1:noprint_wrappers=1 infile.mp4
#+END_SRC

* bc command 

bc minus 1  

bc -l <<< '27.160467-1'

ffprobe get duration in seconds and use cut to remove microseconds

#+BEGIN_SRC sh
dur=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 clip1.mp4 | cut -d\. -f1)
#+END_SRC

bc remove 1 second from the vide duration

#+BEGIN_SRC sh
offset=$(bc -l <<< "${dur}"-1)
#+END_SRC

