#+STARTUP: content
#+OPTIONS: num:nil author:nil
* st terminal

install ncurses needed for the tc command in the Makefile

#+BEGIN_SRC sh 
# pkg install ncurses
#+END_SRC

[[https://st.suckless.org/][st terminal]]

clone the st terminal git repository

#+BEGIN_SRC sh
git clone https://git.suckless.org/st
#+END_SRC

** config.mk

edit config.mk

#+BEGIN_SRC sh
vi config.mk
#+END_SRC

+ change from

#+BEGIN_SRC sh
X11INC = /usr/X11R6/include
X11LIB = /usr/X11R6/lib
#+END_SRC

+ to 

#+BEGIN_SRC conf
X11INC = /usr/local/include
X11LIB = /usr/local/lib
#+END_SRC

** config.def.h

edit config.def.h

#+BEGIN_SRC sh
vi config.def.h
#+END_SRC

** change font

#+BEGIN_SRC conf
static char font[] = "Inconsolata:pixelsize=19:lcdfilter=lcddefault:hintstyle=hintnone:rgba=rgb:antialias=true:autohint=false";
#+END_SRC

** remove the border

change this line 

#+BEGIN_SRC conf
static int borderpx = 2;
#+END_SRC

to this to remove the border

#+BEGIN_SRC conf
static int borderpx = 0;
#+END_SRC

** change the shell 

find the location of your current shell for example zsh

#+BEGIN_SRC sh
whereis zsh
#+END_SRC

outputs

#+BEGIN_SRC config
/usr/local/bin/zsh
#+END_SRC

so we need to change this line

#+BEGIN_SRC sh
static char *shell = "/bin/sh";
#+END_SRC

to this to change the shell from sh to zsh

#+BEGIN_SRC sh
static char *shell = "/usr/local/bin/zsh";
#+END_SRC

** mouse pointer

By default the mouse pointer is XC_xterm; which often can be hard to find. To change it to your cursor theme's normal one, edit the following:

#+BEGIN_SRC conf
static unsigned int mouseshape = XC_left_ptr;
#+END_SRC

** create diff patch

create a diff between the master branch and the patch branch

#+BEGIN_SRC sh
git format-patch master --stdout > ~/Desktop/st-freebsd-patch.diff
#+END_SRC

** solarized colour

[[https://st.suckless.org/patches/solarized/]]

[[https://st.suckless.org/patches/solarized/st-solarized-dark-20180411-041912a.diff]]

#+BEGIN_SRC conf
/* Terminal colors (16 first used in escape sequence) */
static const char *colorname[] = {
    /* solarized dark */
    "#073642",  /*  0: black    */
    "#dc322f",  /*  1: red      */
    "#859900",  /*  2: green    */
    "#b58900",  /*  3: yellow   */
    "#268bd2",  /*  4: blue     */
    "#d33682",  /*  5: magenta  */
    "#2aa198",  /*  6: cyan     */
    "#eee8d5",  /*  7: white    */
    "#002b36",  /*  8: brblack  */
    "#cb4b16",  /*  9: brred    */
    "#586e75",  /* 10: brgreen  */
    "#657b83",  /* 11: bryellow */
    "#839496",  /* 12: brblue   */
    "#6c71c4",  /* 13: brmagenta*/
    "#93a1a1",  /* 14: brcyan   */
    "#fdf6e3",  /* 15: brwhite  */
};


/*
 * Default colors (colorname index)
 * foreground, background, cursor, reverse cursor
 */
unsigned int defaultfg = 12;
unsigned int defaultbg = 8;
static unsigned int defaultcs = 14;
static unsigned int defaultrcs = 15;
#+END_SRC

** apply diff patch

to apply the diff to the freshly checked out git repository

checkout the git repository

#+BEGIN_SRC sh
git clone git://git.suckless.org/st
#+END_SRC

create a new git branch

#+BEGIN_SRC sh
git checkout -b patch
#+END_SRC

+ apply the diff patch

#+BEGIN_SRC sh
git apply ~/Desktop/st-freebsd-patch.diff
#+END_SRC

checkout the master branch

#+BEGIN_SRC sh
git checkout master
#+END_SRC

merge the patch branch into the master branch

#+BEGIN_SRC sh
git merge patch
#+END_SRC

If you some conflicts occur, resolve them and then record the changes and commit the result. git mergetool can help with resolving the conflicts.
Updating customizations after new release

When the time comes to update your customizations after a new release of dwm or when the dwm repository contains a commit fixing some bug, you first pull the new upstream changes into the master branch

#+BEGIN_SRC sh
git checkout master
git pull
#+END_SRC

Then rebase your customization branch on top of the master branch

#+BEGIN_SRC sh
git checkout my_dwm
git rebase --preserve-merges master
#+END_SRC

The --preserve-merges option ensures that you don't have to resolve conflicts which you have already resolved while performing merges again.

In case there are merge conflicts anyway, resolve them (possibly with the help of git mergetool), then record them as resolved and let the rebase continue

#+BEGIN_SRC sh
git add resolved_file.ext
git rebase --continue
#+END_SRC

If you want to give up, you can always abort the rebase

#+BEGIN_SRC sh
git rebase --abort
#+END_SRC

** scrollback patch

[[https://st.suckless.org/patches/scrollback/][st scrollback patch]]

#+BEGIN_SRC sh
wget https://st.suckless.org/patches/scrollback/st-scrollback-20200504-28ad288.diff
#+END_SRC

apply the patch

#+BEGIN_SRC sh
patch -p1 < ~/Desktop/st-xresources-20190105-3be4cf1.diff
#+END_SRC

add the changes

#+BEGIN_SRC sh
git add .
#+END_SRC

commit the changes

#+BEGIN_SRC sh
git commit -a
#+END_SRC

** merge changes into master branch

#+BEGIN_SRC sh
git checkout master
#+END_SRC

merge the patch branch into the master branch

#+BEGIN_SRC sh
git merge patch
#+END_SRC

** st git update

If you some conflicts occur, resolve them and then record the changes and commit the result. git mergetool can help with resolving the conflicts.
Updating customizations after new release

When the time comes to update your customizations after a new release of dwm or when the dwm repository contains a commit fixing some bug, you first pull the new upstream changes into the master branch

#+BEGIN_SRC sh
git checkout master
git pull
#+END_SRC

Then rebase your customization branch on top of the master branch

#+BEGIN_SRC sh
git checkout patch
git rebase --preserve-merges master
#+END_SRC

The --preserve-merges option ensures that you don't have to resolve conflicts which you have already resolved while performing merges again.

In case there are merge conflicts anyway, resolve them (possibly with the help of git mergetool), then record them as resolved and let the rebase continue

#+BEGIN_SRC sh
git add resolved_file.ext
git rebase --continue
#+END_SRC

If you want to give up, you can always abort the rebase

#+BEGIN_SRC sh
git rebase --abort
#+END_SRC
