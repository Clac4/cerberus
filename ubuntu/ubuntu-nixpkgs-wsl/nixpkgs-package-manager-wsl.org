#+STARTUP: content
* nixos package manager
** nixos install
*** single user install

**** create the /nix directory

#+begin_src sh
sudo mkdir -p /nix
#+end_src

**** chown the directory

replace djwilcox with your user name

#+begin_src sh
sudo chown djwilcox /nix
#+end_src

**** nixpkgs single user install script

#+begin_src sh
sh <(curl -L https://nixos.org/nix/install) --no-daemon
#+end_src

**** run the following command after the install

replace djwilcox with your user name

#+begin_src sh
. /home/djwilcox/.nix-profile/etc/profile.d/nix.sh
#+end_src

** nixpkgs config

A user’s nixpkgs configuration is stored in a user-specific configuration file located at ~/.config/nixpkgs/config.nix.

*** create the ~/.config directories

run the following commands in the terminal to create the directories for the programs

+ aria2

#+begin_src sh
mkdir -p ~/.config/aria2
#+end_src

+ nixpkgs

#+begin_src sh
mkdir -p ~/.config/nixpkgs
#+end_src

+ yt-dlp

#+begin_src sh
mkdir -p ~/.config/yt-dlp
#+end_src

We will also create a bin directory in our home for our scripts

#+begin_src sh
mkdir -p ~/bin
#+end_src

Install the mlbtv script into our new bin folder

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/yt-dlp/mlbtv' -o ~/bin/mlbtv
#+end_src

*** install zsh syntax highlighting

run the following command to install zsh syntax highlighting

#+begin_src sh
sudo apt install zsh-syntax-highlighting
#+end_src

*** download the config files with curl

run the following commands to install all the config files

+ zshrc

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/ubuntu/ubuntu-nixpkgs-wsl/.zshrc' -o ~/.zshrc
#+end_src

+ zshenv

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/ubuntu/ubuntu-nixpkgs-wsl/.zshenv' -o ~/.zshenv
#+end_src

+ nixpkgs

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/ubuntu/ubuntu-nixpkgs-wsl/.config/nixpkgs/config.nix' -o ~/.config/nixpkgs/config.nix
#+end_src

+ aria2

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/ubuntu/ubuntu-nixpkgs-wsl/.config/aria2/aria2.conf' -o ~/.config/aria2/aria2.conf
#+end_src

+ yt-dlp

#+begin_src sh
curl 'https://raw.githubusercontent.com/NapoleonWils0n/cerberus/master/ubuntu/ubuntu-nixpkgs-wsl/.config/yt-dlp/config' -o ~/.config/yt-dlp/config
#+end_src

restart ubuntu so it picks up the new scripts

** install packages from myPackages

run the following command to install all the packages in the config.nix file

#+begin_src sh
nix-env -iA nixpkgs.myPackages
#+end_src

** editing the config.nix file

You can edit the config.nix file with a text editor like vi on linux

#+begin_src sh
vi ~/.config/nixpkgs/config.nix
#+end_src

Or you can edit the config.nix using a text editor with notepad ++ on windows
and then add the names of the software you want to install

Open the windows file explorer
In the left hand column at the bottom you should see a Penguin and the word linux

Click the penguin icon and you should see the linux file system

Navigate to the following location
replace username with your user name

#+begin_src sh
/home/username/.config/nixpkgs/config.nix
#+end_src

You should be able to right click on the file in the windows file and select open with notepad ++
and then edit the file

** installing new packages

if you search for yt-dlp on nixos you get a page like this

[[https://search.nixos.org/packages?channel=unstable&show=yt-dlp&from=0&size=50&sort=relevance&type=packages&query=yt-dlp][nixos yt-dlp]]

you'll see it gives you a command like this to install on the nixos operating system

#+begin_src sh
nix-env -iA nixos.yt-dlp
#+end_src

or for nixpkgs a command like this

#+begin_src sh
nix-env -iA nixpkgs.yt-dlp
#+end_src

we dont want to run this command because we are using package overrides in config.nix 
what we want to do is get the name of package we are going to add to the config.nix file

the name of the package we add to the config.nix doesnt contain the nixpkgs. prefix

so the name of the yt-dlp package is

#+begin_src sh
yt-dlp
#+end_src

and not

#+begin_src sh
nixpkgs.yt-dlp
#+end_src

After you have edited the config.nix file and added the names of packages to install
See the section above on editing the config.nix file

you need to run the following command to install all the packages in the config.nix file

#+begin_src sh
nix-env -iA nixpkgs.myPackages
#+end_src

see the package overrides section below on what the file looks like

** package overrides

Using packageOverrides, it is possible to manage packages declaratively.
This means that we can list all of our desired packages within a declarative Nix expression. 

To install it into our environment, you can just run nix-env -iA nixpkgs.myPackages
To explore what’s been installed, just look through ~/.nix-profile/.

You can see that a lot of stuff has been installed.
Some of this stuff is useful some of it isn’t. Let’s tell Nixpkgs to only link the stuff that we want: 

this is an example config

#+begin_src sh
{
  packageOverrides = pkgs: with pkgs; rec {
    myProfile = writeText "my-profile" ''
      export PATH=$HOME/.nix-profile/bin:/nix/var/nix/profiles/default/bin:/sbin:/bin:/usr/sbin:/usr/bin
      export MANPATH=$HOME/.nix-profile/share/man:/nix/var/nix/profiles/default/share/man:/usr/share/man
      export INFOPATH=$HOME/.nix-profile/share/info:/nix/var/nix/profiles/default/share/info:/usr/share/info
    '';
    myPackages = pkgs.buildEnv {
      name = "my-packages";
      paths = [
        (runCommand "profile" {} ''
          mkdir -p $out/etc/profile.d
          cp ${myProfile} $out/etc/profile.d/my-profile.sh
        '')
        aria
        curl
        exiftool
        git
        imagemagick
        mediainfo
        yt-dlp
      ];
      pathsToLink = [ "/share/man" "/share/doc" "/share/info" "/share/applications" "/share/icons" "/bin" "/etc" ];
      extraOutputsToInstall = [ "man" "doc" "info" "applications" "icons" ];
      postBuild = ''
        if [ -x $out/bin/install-info -a -w $out/share/info ]; then
          shopt -s nullglob
          for i in $out/share/info/*.info $out/share/info/*.info.gz; do
              $out/bin/install-info $i $out/share/info/dir
          done
        fi
      '';
    };
  };
}
#+end_src

** upgrading packages

You can also upgrade all packages for which there are newer versions:

#+begin_src sh
nix-env -u
#+end_src

Sometimes it’s useful to be able to ask what nix-env would do, without actually doing it.
For instance, to find out what packages would be upgraded by nix-env -u, you can do

#+begin_src sh
nix-env -u --dry-run
#+end_src

** upgrading nixos

#+begin_src sh
nix-channel --update; nix-env -iA nixpkgs.nix nixpkgs.cacert
#+end_src
** uninstall nixos

Uninstalling nix:

Delete the files Nix added to your system:
replace djwilcox with your user name

#+begin_src sh
sudo rm -rI /nix
rm -rI /home/djwilcox/.nix-profile
rm -rI /home/djwilcox/.nix-defexpr
rm -rI /home/djwilcox/.nix-channels
#+end_src
