#+STARTUP: content
* debian unbound dns server
** install packages

install unbound and dnssec-trigger

#+begin_src sh
sudo apt install unbound dnssec-trigger
#+end_src

*** unbound set up

change directory to the unbound.conf.d directory

#+begin_src sh
cd /etc/ubound.conf.d/
#+end_src

you should see a custom.conf file
we will back up the custom.conf file and replace it with a new version

back up the custom.conf file

#+begin_src sh
sudo mv custom.conf custom.conf.bak
#+end_src

*** copy new custom.conf file into place

change directory into the /etc/unbound/unbound.conf.d directory in this git repo

#+begin_src sh
cd etc/unbound/unbound.conf.d/
#+end_src

*** copy the custom.conf file to /etc/unbound/unbound.conf.d

#+begin_src sh
sudo cp custom.conf /etc/unbound/unbound.conf.d/
#+end_src

*** dns adblocking

change directory into the /etc/unbound/ directory in this git repo

#+begin_src sh
cd etc/unbound/
#+end_src

*** copy the unbound_ad_servers to /etc/unbound/

#+begin_src sh
sudo cp unbound_ad_servers /etc/unbound/
#+end_src

*** resolv.conf

we need to edit /etc/resolv.conf and add some code

#+begin_src sh
sudo nano /etc/resolv.conf
#+end_src

*** add the code below to the resolv.conf file

#+begin_src sh
nameserver 127.0.0.1
#+end_src

the /etc/resolv.conf should only contain the code above

*** next we need to write protect the file so it cant be overwritten by the network manager

#+begin_src sh
sudo chattr +i /etc/resolv.conf
#+end_src

*** dhclient.conf

we need to edit the /etc/dhcp/dhclient.conf file

#+begin_src sh
sudo nano /etc/dhcp/dhclient.conf
#+end_src

we need to add the code below at the top of the file just below the comment

#+begin_src sh
nohook resolv.conf;
#+end_src

*** the file should look like this

#+begin_src conf
# Configuration file for /sbin/dhclient.
#
# This is a sample configuration file for dhclient. See dhclient.conf's
#	man page for more information about the syntax of this file
#	and a more comprehensive list of the parameters understood by
#	dhclient.
#
# Normally, if the DHCP server provides reasonable information and does
#	not leave anything out (like the domain name, for example), then
#	few changes must be made to this file, if any.
#

nohook resolv.conf;
#+end_src

*** start unbound

start unbound dns server

#+begin_src sh
sudo systemctl start unbound.service
#+end_src

*** enable unbound dns server to start at boot

#+begin_src sh
sudo systemctl enable unbound.service
#+end_src

*** install dnsutils

we need to install dnsutils which will install nslookup
so we can test the local unbound server is being used to lookup domains

#+begin_src sh
sudo apt install dnsutils
#+end_src

*** now we use nslookup to look up the dns for google.com using our local dns server

#+begin_src sh
nslookup google.com
#+end_src

*** this should output something like the following

#+begin_src conf
Server:		127.0.0.1
Address:	127.0.0.1#53

Non-authoritative answer:
Name:	google.com
Address: 216.58.210.46
#+end_src

you can see the server is 127.0.0.1 which means our unbound dns server is working

*** checking for dns leaks

we want to check our dns server is the only server being used for dns lookups,
so we will a website to check for dnsleaks

go to this website in your browser

[[https://dnsleaktest.com]]

click the extended test button
you should see only one dns server listed

this will show your geographic location in the test
so you can see that the dns query are coming from your location

for extra ninja points we want to mask our location by using a vpn

if you use a vpn from somewhere like privateinternetaccess.com 
and then go to the dnsleakstest.com site and run the extended test again you will see your dns now comes out at the vpn endpoint

eg if you connect to a vpn server in the usa your dns will now come out in the usa
